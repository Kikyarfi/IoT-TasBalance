#include <SPIFFS.h>
#include <WiFi.h>
#include <WebServer.h>
#include "HX711.h"

// === Load Cell Configuration ===
#define DT 16
#define SCK 4
HX711 scale;
float berat = 0.0;
float scale_factor = 214.3917;  // Ganti sesuai hasil kalibrasi
int Buzzer = 17;
int Button = 14;

// === WiFi & Web Server ===
const char* ssid = "Mikrotik";
const char* password = "r4h4s1a4900**";
WebServer server(80);

// === User Profile & Batas Berat ===
String userData = "usia=0&berat=0&tinggi=0&mode=anak";
float batas_berat = 5.0;

// === Log Berat ===
#define MAX_LOG 100
float logBerat[MAX_LOG];
int logIndex = 0;

// === Penanda untuk Autosave Berat ===
unsigned long lastStableTime = 0;
float lastStableBerat = 0;
bool beratTersimpan = false;

void handleRoot();
void handleSaveUser();
void handleGetBatasBerat();
void handleRealtimeWeight();
void handleGetLog();
void handleResetLog();

float hitungBatasBerat(String mode, float beratBadan, String kondisi) {
  if (mode == "anak") {
    return beratBadan * 0.15;
  } else if (mode == "dewasa") {
    return beratBadan * 0.10;
  } else if (mode == "lansia" || kondisi == "medis") {
    return beratBadan * 0.08;
  }
  return 5.0;
}

void loadUserProfile() {
  File f = SPIFFS.open("/user.txt", "r");
  if (f) {
    userData = f.readString();
    f.close();
  }
}

void saveUserProfile() {
  File f = SPIFFS.open("/user.txt", "w");
  if (f) {
    f.print(userData);
    f.close();
  }
}

void simpanLog(float b) {
  if (logIndex < MAX_LOG) {
    logBerat[logIndex++] = b;
  }
}

void resetLog() {
  logIndex = 0;
}

void handleRoot() {
  File f = SPIFFS.open("/index.html", "r");
  if (f) {
    String html = f.readString();
    f.close();
    server.send(200, "text/html", html);
  } else {
    server.send(200, "text/html", "<h2>ESP32 TasBalance</h2><p>Upload index.html ke SPIFFS</p>");
  }
}

void handleSaveUser() {
  if (server.hasArg("plain")) {
    userData = server.arg("plain");
    saveUserProfile();

    // Parse ulang dan hitung batas berat baru
    int usia = 0;
    float beratBadan = 0, tinggi = 0;
    char mode[20] = "anak";
    char kondisi[20] = "";
    sscanf(userData.c_str(), "usia=%d&berat=%f&tinggi=%f&mode=%s", &usia, &beratBadan, &tinggi, mode);
    if (userData.indexOf("medis") > 0) strcpy(kondisi, "medis");
    batas_berat = hitungBatasBerat(mode, beratBadan, kondisi);
  }
  server.send(200, "text/plain", "OK");
}

void handleGetBatasBerat() {
  String msg = "Berat tas maksimum yang aman untuk Anda adalah " + String(batas_berat, 2) + " kg";
  server.send(200, "text/plain", msg);
}

void handleRealtimeWeight() {
  String json = "{\"berat\":" + String(berat,2) + ",\"batas_berat\":" + String(batas_berat,2) + "}";
  server.send(200, "application/json", json);
}

void handleGetLog() {
  String json = "[";
  for (int i = 0; i < logIndex; i++) {
    json += String(logBerat[i],2);
    if (i < logIndex - 1) json += ",";
  }
  json += "]";
  server.send(200, "application/json", json);
}

void handleResetLog() {
  resetLog();
  server.send(200, "text/plain", "Log direset");
}

void setup() {
  Serial.begin(115200);
  pinMode(Buzzer, OUTPUT);
  pinMode(Button, INPUT_PULLUP);

  scale.begin(DT, SCK);
  scale.set_scale(scale_factor);
  scale.tare();

  if (!SPIFFS.begin(true)) {
    Serial.println("Gagal mount SPIFFS!");
    return;
  }

  loadUserProfile();

  // Parsing data user & hitung batas berat awal
  int usia = 0;
  float beratBadan = 0, tinggi = 0;
  char mode[20] = "anak";
  char kondisi[20] = "";
  sscanf(userData.c_str(), "usia=%d&berat=%f&tinggi=%f&mode=%s", &usia, &beratBadan, &tinggi, mode);
  if (userData.indexOf("medis") > 0) strcpy(kondisi, "medis");
  batas_berat = hitungBatasBerat(mode, beratBadan, kondisi);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Menghubungkan ke WiFi");
  unsigned long startAttempt = millis();
  const unsigned long timeout = 15000;
  while (WiFi.status() != WL_CONNECTED && millis() - startAttempt < timeout) {
    Serial.print(".");
    delay(500);
  }
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nGagal konek WiFi.");
    return;
  }
  Serial.println("\nTerhubung!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/save-user", HTTP_POST, handleSaveUser);
  server.on("/get-batas-berat", handleGetBatasBerat);
  server.on("/realtime-weight", handleRealtimeWeight);
  server.on("/get-log", handleGetLog);
  server.on("/reset-log", handleResetLog);
  server.begin();
  Serial.println("Web server started");
}

void loop() {
  server.handleClient();

  float newBerat = scale.get_units(5);

  if (abs(newBerat - berat) > 0.05) {
    berat = newBerat;
    lastStableTime = millis(); // Reset timer saat berat berubah
    beratTersimpan = false;
  }

  // Simpan berat otomatis setelah 2 detik stabil
  if (!beratTersimpan && (millis() - lastStableTime > 2000)) {
    simpanLog(berat);
    beratTersimpan = true;
    lastStableBerat = berat;
  }

  // Buzzer & notifikasi
  if (berat > batas_berat) {
    digitalWrite(Buzzer, HIGH); // Aktifkan buzzer
  } else {
    digitalWrite(Buzzer, LOW);
  }

  if (digitalRead(Button) == LOW) {
    resetLog();
    delay(500); // debouncing
  }
}
